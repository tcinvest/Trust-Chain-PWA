generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model invests {
  id                    Int      @id @default(autoincrement())
  user_id               Int?
  schema_id             Int?
  transaction_id        Int?
  invest_amount         Decimal? @db.Decimal
  already_return_profit Int?
  total_profit_amount   Decimal? @db.Decimal
  last_profit_time      String?
  next_profit_time      String?
  capital_back          Int?
  interest              Int?
  interest_type         String?
  return_type           String?
  number_of_period      Int?
  period_hours          Int?
  wallet                String?
  status                String?
  created_at            String?
  updated_at            String?
}

model referral_relationships {
  id               Int     @id @default(autoincrement())
  referral_link_id Int?
  user_id          Int?
  created_at       String?
  updated_at       String?
}

model referrals {
  id                 Int      @id @default(autoincrement())
  referral_target_id Int?
  type               String?
  bounty             Decimal? @db.Decimal
  target_amount      Decimal? @db.Decimal
  description        String?
  status             Int?
  created_at         String?
  updated_at         String?
}

model transactions {
  id                Int      @id @default(autoincrement())
  user_id           Int?
  from_user_id      String?
  from_model        String?
  target_id         String?
  target_type       String?
  is_level          Int?
  tnx               String?
  description       String?
  amount            Decimal? @db.Decimal
  type              String?
  charge            String?
  final_amount      Decimal? @db.Decimal
  method            String?
  pay_currency      String?
  pay_amount        String?
  manual_field_data String?
  approval_cause    String?
  status            String?
  created_at        String?
  updated_at        String?
}

model users {
  id              Int      @id @default(autoincrement())
  ranking_id      Int?
  rankings        String?
  avatar          String?
  first_name      String?
  last_name       String?
  country         String?
  phone           String?
  username        String?
  email           String?
  gender          String?
  date_of_birth   String?
  city            String?
  zip_code        String?
  address         String?
  balance         Decimal? @default(0.00) @db.Decimal
  profit_balance  Decimal? @default(0.00) @db.Decimal
  recovery_fund   Decimal? @db.Decimal
  status          Int?
  kyc             Int?
  kyc_credential  String?
  deposit_status  Int?
  withdraw_status Int?
  transfer_status Int?
  ref_id          String?
  created_at      String?
  updated_at      String?
  clerk_id        String?  @unique(map: "users_clerkid_key")
}

model referral_links {
  id                  Int     @id @default(autoincrement())
  user_id             Int?
  referral_program_id Int?
  code                String?
  created_at          String?
  updated_at          String?
}

model bots {
  id                Int      @id
  name              String   @db.VarChar(100)
  description       String?  @db.VarChar(100)
  investment_range  String?  @db.VarChar(50)
  capital_back      String?  @db.VarChar(10)
  return_type       String?  @db.VarChar(20)
  number_of_periods String?  @db.VarChar(20)
  profit_withdraw   String?  @db.VarChar(20)
  holiday_note      String?
  is_active         Boolean? @default(true)
  days              Int?
  return_percentage Int?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payment_proofs {
  id           Int       @id @default(autoincrement())
  user_id      Int
  proof_url    String    @db.VarChar(500)
  type         String    @db.VarChar(10)
  reference_id Int?
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  status       String?
  amount       String?

  @@index([reference_id], map: "idx_reference_id")
  @@index([type], map: "idx_type")
  @@index([user_id], map: "idx_user_id")
}

model withdrawalrequests {
  id             Int     @id(map: "withdrawal_requests_pkey") @default(autoincrement())
  user_id        Int
  user_email     String? @db.VarChar(255)
  user_name      String? @db.VarChar(255)
  amount         Decimal @db.Decimal(10, 2)
  balance_type   String  @db.VarChar(50)
  wallet_address String  @db.VarChar(255)
  network        String  @db.VarChar(100)
  charges        Decimal @db.Decimal(10, 2)
  net_amount     Decimal @db.Decimal(10, 2)
  status         String? @default("pending") @db.VarChar(20)
  admin_notes    String?
  created_at     String? @db.VarChar(255)
  updated_at     String? @db.VarChar(255)
  approved_at    String? @db.VarChar(255)
  approved_by    String? @db.VarChar(255)
}

model support_complaints {
  id          Int       @id @default(autoincrement())
  user_id     Int
  name        String    @db.VarChar(255)
  email       String    @db.VarChar(255)
  subject     String    @db.VarChar(255)
  category    String    @db.VarChar(50)
  priority    String    @default("Medium") @db.VarChar(20)
  description String
  attachment  String?   @db.VarChar(500)
  status      String    @default("Open") @db.VarChar(20)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model referral_programs {
  id               Int?    @db.SmallInt
  name             String? @db.VarChar(16)
  uri              String? @db.VarChar(8)
  lifetime_minutes Int?
  created_at       String? @db.VarChar(19)
  updated_at       String? @db.VarChar(19)

  @@map("_referral_programs")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model referral_targets {
  id         Int?    @db.SmallInt
  name       String? @db.VarChar(9)
  created_at String? @db.VarChar(19)
  updated_at String? @db.VarChar(19)

  @@map("_referral_targets")
  @@ignore
}

model crypto_currencies {
  id             Int       @id @default(autoincrement())
  name           String    @unique @db.VarChar(50)
  wallet_address String
  qr_code_image  String?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)

  @@index([name], map: "idx_crypto_name")
}
